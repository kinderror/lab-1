#include <iostream>
#include <random>
#include <math.h>

// функция создает k дислокаций и помещает их в случайные точки пространства
void make_holes(int n, int k, int *holes, int *stopped_holes){
    int space[2 * n * n], rnd, N = 0; // [1 1 1 2 ... 5 4 5 5]
    std::random_device dev;
    std::mt19937 rng(dev());
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            space[2 * j + 2 * i * n] = i + 1;
            space[2 * i + 1 + 2 * j * n] = i + 1;
        }
    }
    for (int i = 0; i < k; i++) {
        std::uniform_int_distribution<int> dist(0, n * n - i - 1);
        rnd = dist(rng);
        holes[i] = space[2 * rnd];
        holes[k + i] = space[2 * rnd + 1];
        stopped_holes[i] = 0;
        for (int j = rnd; j < n * n - i - 1; j++) {
            space[2 * j] = space[2 * j + 2];
            space[2 * j + 1] = space[2 * j + 3];
        }
    }
    stopped_holes[k] = 0;
    for (int i = 0; i < k; i++) {
        if (holes[i] == 1 or holes[i] == n or holes[i + k] == 1 or holes[i + k] == n) stopped_holes[i] = 1;
        for (int j = 0; j < i; j++) {
            if (fabs(holes[j] - holes[i]) + fabs(holes[j + k] - holes[i + k]) == 1) {
                stopped_holes[i] = 1;
                stopped_holes[j] = 1;
            }
        }
    }
    for (int i = 0; i < k; i++) {
        if (stopped_holes[i] == 1) N++;
    }
    if (N == k) stopped_holes[k] = 1;
}

// функция меняет позицию каждой дислокации на 1 пункт и присваивает статус остановки
void change_pos(int n, int k, int *holes, int *stopped_holes) {
    int rnd, N = 0;
    std::random_device dev;
    std::mt19937 rng(dev());
    std::uniform_int_distribution<int> dist(1, 4);
    for (int i = 0; i < k; i++) {
        if (stopped_holes[i] == 0) {
            rnd = dist(rng);
            if (rnd == 1) holes[i]++;
            if (rnd == 2) holes[i]--;
            if (rnd == 3) holes[i + k]++;
            if (rnd == 4) holes[i + k]--;
            for (int j = 0; j < i; j++) {
                if (holes[j] == holes[i] and holes[j + k] == holes[i + k]) {
                    stopped_holes[i] = 1;
                    stopped_holes[j] = 1;
                    if (rnd == 1) holes[i]--;
                    if (rnd == 2) holes[i]++;
                    if (rnd == 3) holes[i + k]--;
                    if (rnd == 4) holes[i + k]++;
                }
                if (fabs(holes[j] - holes[i]) + fabs(holes[j + k] - holes[i + k]) == 1) {
                    stopped_holes[i] = 1;
                    stopped_holes[j] = 1;
                }
            }
            if (holes[i] == 1 or holes[i] == n or holes[i + k] == 1 or holes[i + k] == n) stopped_holes[i] = 1;
        }
    }
    for (int i = 0; i < k; i++) {
        if (stopped_holes[i] == 1) N++;
    }
    if (N == k) stopped_holes[k] = 1;
}

// функция считает дисперсию времен и возвращает относительную погрешность среднего значения
double calculate_error(double t_0, int *time, int N) {
    double D = 0;
    for (int i = 0; i < N; i++) {
        D += (time[i] - t_0)*(time[i] - t_0);
    }
    return pow(D / (N * N) , 0.5) / t_0;
}

int main() {
    int n, k, t; // размер кристалла n и количество дислокаций k
    std::cout << "Enter size:" << std::endl;
    std::cin >> n;
    std::cout << "Amount of dislocations: " << std::endl;
    std::cin >> k;
    int holes[2 * k], stopped_holes[k + 1], time[10000], N = 0; 
    double t_0;
    while (N < 10000) {
        t = 0;
        make_holes(n, k, holes, stopped_holes);
        while (stopped_holes[k] == 0) {
            change_pos(n, k, holes, stopped_holes);
            t++;
        }
        time[N] = t;
        N++;
    }
    for (int i = 0; i < N; i++) {
        t_0 += time[i];
    }
    std::cout << "Mean time: " << t_0 / N << std::endl;
    std::cout << "Error: " << 100 * calculate_error(t_0, time, N) << "%" << std::endl;
    std::cout << "Dislocations / All: " << 100.0 * k / (n * n) << "%";
    return 0;
}
